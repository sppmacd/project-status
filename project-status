#!/usr/bin/env python3
import argparse
import os
import sys
import time
import traceback

from ps.detector import DetectorRegistry
from ps.files import Directory, FileDescriptorManager
import ps.display
import ps.logging
import config

def parse_args():
    parser = argparse.ArgumentParser(prog='project-status', description="Manage your projects.")
    parser.add_argument("--disable-formatting", help="disable output formatting", action="store_true")
    parser.add_argument("--no-open", help="don't open files (for performance)", action="store_true")
    parser.add_argument("--verbose", "-v", help="print what is done", action="store_true")
    
    subparsers = parser.add_subparsers(help="command", dest="command", required=True)
    
    # display-tree
    sp_display_tree = subparsers.add_parser("display-tree", help="display filesystem tree with guesses")
    sp_display_tree.add_argument("path", nargs="?", help="path to display", default=".")
    sp_display_tree.add_argument("--exclude", "-x", help="exclude specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    sp_display_tree.add_argument("--include", "-i", help="include only specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    
    # config
    sp_config = subparsers.add_parser("config", help="get/set various config options")
    sp_config.add_argument("name", help="Config option name", choices=["guessers"])
    
    # info
    sp_info = subparsers.add_parser("info", help="display info in fancy way")
    sp_info.add_argument("path", nargs="?", help="path to list projects from", default=".")
    sp_info.add_argument("--exclude", "-x", help="exclude specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    sp_info.add_argument("--include", "-i", help="include only specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    
    # list
    sp_list = subparsers.add_parser("list", help="list projects in directory")
    sp_list.add_argument("path", nargs="?", help="path to list projects from", default=".")
    sp_list.add_argument("--exclude", "-x", help="exclude specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    sp_list.add_argument("--include", "-i", help="include only specified files by glob (guessers if started with '/', multiple-entries shall be comma-separated)")
    
    # list-files
    sp_list_files = subparsers.add_parser("list-files", help="list files in project")
    sp_list_files.add_argument("path", nargs="?", help="path to list projects from", default=".")
    sp_list_files.add_argument("--exclude", "-x", help="exclude specified files by glob (guessers if started with '/'), comma-separated")
    sp_list_files.add_argument("--include", "-i", help="include only specified files by glob (guessers if started with '/'), comma-separated")
    sp_list_files.add_argument("--guesses", "-g", help="specify guess types to list, comma separated", required=True)
    
    # version
    sp_version = subparsers.add_parser("version", help="display version")

    return parser.parse_args()

def setup_directory():
    config.args.exclude = config.args.exclude.split(",") if config.args.exclude != None else []
    config.args.include = config.args.include.split(",") if config.args.include != None else []
    
    print("Setting up directory listing")
    return Directory(None, config.args.path)

def main(args):
    if args.command == "version":
        print("Project Status v1.0\nCopyright (c) Sppmacd 2021")
        sys.exit(0)
    elif args.command == "config":
        if args.name == "guessers":
            for priority, guesser_list in DetectorRegistry.instance.file_type_guessers.items():
                print(ps.logging.sgr("1;33", "priority") + " = " + ps.logging.sgr("35", str(priority)) + ": ")
                for guesser in guesser_list:
                    print(" â€¢ " + ps.logging.sgr("32", "/" + guesser.name))
                print()
        sys.exit(0)
    
    config.args = args
    
    FileDescriptorManager()
    
    if args.command == "display-tree":
        file_list = setup_directory()
        ps.logging.print_status("", "")
        print("Generating output")
        print(file_list)

    elif args.command == "info":
        file_list = setup_directory()
        ps.logging.print_status("", "")
        print("Generating output")
        ps.display.directory_fancy_display(file_list)

    elif args.command == "list":
        file_list = setup_directory()
        ps.logging.print_status("", "")
        print("Generating output")
        file_list.print_projects()

    elif args.command == "list-files":
        file_list = setup_directory()
        ps.logging.print_status("", "")
        print("Generating output")
        file_list.print_if_has_guesses(config.args.guesses.split(","))

try:
    if __name__ == "__main__":
        main(parse_args())
    else:
        ps.logging.print_error("Importing as module not supported!")
except KeyboardInterrupt:
    ps.logging.print_error("Interrupted :(")
except SystemExit:
    pass
except:
    print("Exception :( " + str(sys.exc_info()))
    traceback.print_exc()
