#!/usr/bin/env python3
import argparse
import os
import sys
import time
import traceback

from ps.detector import DetectorRegistry
from ps.files import Directory, FileDescriptorManager
import ps.logging
import config

def parse_args():
    parser = argparse.ArgumentParser(prog='project-status', description="Manage your projects.")
    parser.add_argument("--disable-formatting", help="disable output formatting", action="store_true")
    parser.add_argument("--no-open", help="don't open files (for performance)", action="store_true")
    parser.add_argument("--verbose", "-v", help="print what is done", action="store_true")
    
    subparsers = parser.add_subparsers(help="command", dest="command", required=True)
    
    # display-tree
    sp_display_tree = subparsers.add_parser("display-tree", help="display filesystem tree with guesses")
    sp_display_tree.add_argument("path", nargs="?", help="path to display", default=".")
    sp_display_tree.add_argument("--exclude", "-x", help="exclude specific file types (guessers)")
    
    # config
    sp_config = subparsers.add_parser("config", help="get/set various config options")
    sp_config.add_argument("name", help="Config option name", choices=["guessers"])
    
    # list
    sp_list = subparsers.add_parser("list", help="list projects in directory")
    sp_list.add_argument("path", nargs="?", help="path to list projects from", default=".")
    sp_list.add_argument("--exclude", "-x", help="exclude specific file types (guessers)")
    
    # version
    sp_version = subparsers.add_parser("version", help="display version")

    return parser.parse_args()

def main(args):
    if args.command == "version":
        print("Project Status v1.0\nCopyright (c) Sppmacd 2021")
        sys.exit(0)
    elif args.command == "config":
        if args.name == "guessers":
            for name, value in DetectorRegistry.instance.file_type_guessers.items():
                print(" * " + ps.logging.sgr("1", name))
        sys.exit(0)
    
    config.args = args
    
    FileDescriptorManager()
    
    if args.command == "display-tree":
        config.args.exclude = config.args.exclude.split(",") if config.args.exclude != None else []
        file_list = Directory(None, args.path)
        print(file_list)
    elif args.command == "list":
        config.args.exclude = config.args.exclude.split(",") if config.args.exclude != None else []
        file_list = Directory(None, args.path)
        file_list.print_projects()

try:
    if __name__ == "__main__":
        main(parse_args())
    else:
        ps.logging.print_error("Importing as module not supported!")
except KeyboardInterrupt:
    ps.logging.print_error("Interrupted :(")
except SystemExit:
    pass
except:
    print("Exception :( " + str(sys.exc_info()))
    traceback.print_exc()
